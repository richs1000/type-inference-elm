var _user$project$Question$findFeedback = F3(
	function (answer, response, distractors) {
		findFeedback:
		while (true) {
			var _p0 = distractors;
			if (_p0.ctor === '[]') {
				return A2(_elm_lang$core$Basics_ops['++'], 'Incorrect. The answer is ', answer);
			} else {
				var _p1 = _p0._0;
				if (_elm_lang$core$Native_Utils.eq(
					_elm_lang$core$Basics$fst(_p1),
					response) || _elm_lang$core$Native_Utils.eq(
					_elm_lang$core$Basics$fst(_p1),
					'')) {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$snd(_p1),
						A2(_elm_lang$core$Basics_ops['++'], ' The answer is ', answer));
				} else {
					var _v1 = answer,
						_v2 = response,
						_v3 = _p0._1;
					answer = _v1;
					response = _v2;
					distractors = _v3;
					continue findFeedback;
				}
			}
		}
	});
var _user$project$Question$pickOne = F3(
	function (randomValues, lst, defVal) {
		var rv = A2(
			_elm_lang$core$Maybe$withDefault,
			0,
			_elm_lang$core$List$head(randomValues));
		var index = A2(
			_elm_lang$core$Basics$rem,
			rv,
			_elm_lang$core$List$length(lst));
		return A2(
			_elm_lang$core$Maybe$withDefault,
			defVal,
			_elm_lang$core$List$head(
				A2(_elm_lang$core$List$drop, index, lst)));
	});
var _user$project$Question$Question = F4(
	function (a, b, c, d) {
		return {question: a, distractors: b, answer: c, format: d};
	});
var _user$project$Question$MultipleChoice = {ctor: 'MultipleChoice'};
var _user$project$Question$newQuestion = F2(
	function (randomValues, index) {
		var myVar = A3(
			_user$project$Question$pickOne,
			randomValues,
			_elm_lang$core$Native_List.fromArray(
				['e1', 'e2', 'e3']),
			'e1');
		if (_elm_lang$core$Native_Utils.eq(index, 1)) {
			var myOp = A3(
				_user$project$Question$pickOne,
				A2(_elm_lang$core$List$drop, 1, randomValues),
				_elm_lang$core$Native_List.fromArray(
					['+', '-', '*']),
				'+');
			var myOp$ = _elm_lang$core$Native_Utils.eq(myOp, '+') ? 'addition' : (_elm_lang$core$Native_Utils.eq(myOp, '-') ? 'subtraction' : 'multiplication');
			var distractors$ = _elm_lang$core$Native_Utils.eq(myVar, 'e1') ? _elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'string',
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						'Incorrect. ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							myVar,
							A2(
								_elm_lang$core$Basics_ops['++'],
								' is the result of ',
								A2(_elm_lang$core$Basics_ops['++'], myOp$, ', so it must be an int'))))
				},
					{
					ctor: '_Tuple2',
					_0: 'bool',
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						'Incorrect. ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							myVar,
							A2(
								_elm_lang$core$Basics_ops['++'],
								' is the result of ',
								A2(_elm_lang$core$Basics_ops['++'], myOp$, ', so it must be an int'))))
				},
					{
					ctor: '_Tuple2',
					_0: 'It can have any type',
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						'Incorrect. ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							myVar,
							A2(
								_elm_lang$core$Basics_ops['++'],
								' is the result of ',
								A2(_elm_lang$core$Basics_ops['++'], myOp$, ', so it must be an int'))))
				}
				]) : _elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'string',
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						'Incorrect. ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							myVar,
							A2(
								_elm_lang$core$Basics_ops['++'],
								' is part of a ',
								A2(_elm_lang$core$Basics_ops['++'], myOp$, ' expression, so it must be an int'))))
				},
					{
					ctor: '_Tuple2',
					_0: 'bool',
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						'Incorrect. ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							myVar,
							A2(
								_elm_lang$core$Basics_ops['++'],
								' is part of a ',
								A2(_elm_lang$core$Basics_ops['++'], myOp$, ' expression, so it must be an int'))))
				},
					{
					ctor: '_Tuple2',
					_0: 'It can have any type',
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						'Incorrect. ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							myVar,
							A2(
								_elm_lang$core$Basics_ops['++'],
								' is part of a ',
								A2(_elm_lang$core$Basics_ops['++'], myOp$, ' expression, so it must be an int'))))
				}
				]);
			var answer$ = _elm_lang$core$Native_Utils.eq(myVar, 'e1') ? {
				ctor: '_Tuple2',
				_0: 'int',
				_1: A2(
					_elm_lang$core$Basics_ops['++'],
					'Correct. ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						myVar,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' is the result of ',
							A2(_elm_lang$core$Basics_ops['++'], myOp$, ', so it must be an int'))))
			} : {
				ctor: '_Tuple2',
				_0: 'int',
				_1: A2(
					_elm_lang$core$Basics_ops['++'],
					'Correct. ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						myVar,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' is part of a ',
							A2(_elm_lang$core$Basics_ops['++'], myOp$, ' expression, so it must be an int'))))
			};
			var question$ = _elm_lang$core$Native_List.fromArray(
				[
					'Given this ML expression:',
					A2(
					_elm_lang$core$Basics_ops['++'],
					'val e1 = e2 ',
					A2(_elm_lang$core$Basics_ops['++'], myOp, ' e3')),
					A2(
					_elm_lang$core$Basics_ops['++'],
					'What is the type of ',
					A2(_elm_lang$core$Basics_ops['++'], myVar, '?'))
				]);
			return {question: question$, distractors: distractors$, answer: answer$, format: _user$project$Question$MultipleChoice};
		} else {
			if (_elm_lang$core$Native_Utils.eq(index, 2)) {
				var myOp = A3(
					_user$project$Question$pickOne,
					A2(_elm_lang$core$List$drop, 1, randomValues),
					_elm_lang$core$Native_List.fromArray(
						['>', '>=', '<', '<=']),
					'>');
				var myOp$ = _elm_lang$core$Native_Utils.eq(myOp, '>') ? 'greater than' : (_elm_lang$core$Native_Utils.eq(myOp, '>=') ? 'greater than or equal to' : (_elm_lang$core$Native_Utils.eq(myOp, '<=') ? 'less than or equal to' : 'less than'));
				var distractors$ = _elm_lang$core$Native_Utils.eq(myVar, 'e1') ? _elm_lang$core$Native_List.fromArray(
					[
						{
						ctor: '_Tuple2',
						_0: 'string',
						_1: A2(
							_elm_lang$core$Basics_ops['++'],
							'Incorrect. ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								myVar,
								A2(
									_elm_lang$core$Basics_ops['++'],
									' is the result of a ',
									A2(_elm_lang$core$Basics_ops['++'], myOp$, ' expression, so it must be a bool'))))
					},
						{
						ctor: '_Tuple2',
						_0: 'int',
						_1: A2(
							_elm_lang$core$Basics_ops['++'],
							'Incorrect. ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								myVar,
								A2(
									_elm_lang$core$Basics_ops['++'],
									' is the result of a ',
									A2(_elm_lang$core$Basics_ops['++'], myOp$, ' expression, so it must be a bool'))))
					},
						{
						ctor: '_Tuple2',
						_0: 'It can have any type',
						_1: A2(
							_elm_lang$core$Basics_ops['++'],
							'Incorrect. ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								myVar,
								A2(
									_elm_lang$core$Basics_ops['++'],
									' is the result of a ',
									A2(_elm_lang$core$Basics_ops['++'], myOp$, ' expression, so it must be a bool'))))
					}
					]) : _elm_lang$core$Native_List.fromArray(
					[
						{
						ctor: '_Tuple2',
						_0: 'string',
						_1: A2(
							_elm_lang$core$Basics_ops['++'],
							'Incorrect. ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								myVar,
								A2(
									_elm_lang$core$Basics_ops['++'],
									' is part of a ',
									A2(_elm_lang$core$Basics_ops['++'], myOp$, ' expression, so it must be an int'))))
					},
						{
						ctor: '_Tuple2',
						_0: 'bool',
						_1: A2(
							_elm_lang$core$Basics_ops['++'],
							'Incorrect. ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								myVar,
								A2(
									_elm_lang$core$Basics_ops['++'],
									' is part of a ',
									A2(_elm_lang$core$Basics_ops['++'], myOp$, ' expression, so it must be an int'))))
					},
						{
						ctor: '_Tuple2',
						_0: 'It can have any type',
						_1: A2(
							_elm_lang$core$Basics_ops['++'],
							'Incorrect. ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								myVar,
								A2(
									_elm_lang$core$Basics_ops['++'],
									' is part of a ',
									A2(_elm_lang$core$Basics_ops['++'], myOp$, ' expression, so it must be an int'))))
					}
					]);
				var answer$ = _elm_lang$core$Native_Utils.eq(myVar, 'e1') ? {
					ctor: '_Tuple2',
					_0: 'bool',
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						'Correct. ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							myVar,
							A2(
								_elm_lang$core$Basics_ops['++'],
								' is the result of a ',
								A2(_elm_lang$core$Basics_ops['++'], myOp$, ' expression, so it must be a bool'))))
				} : {
					ctor: '_Tuple2',
					_0: 'int',
					_1: A2(
						_elm_lang$core$Basics_ops['++'],
						'Correct. ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							myVar,
							A2(
								_elm_lang$core$Basics_ops['++'],
								' is part of a ',
								A2(_elm_lang$core$Basics_ops['++'], myOp$, ' expression, so it must be an int'))))
				};
				var question$ = _elm_lang$core$Native_List.fromArray(
					[
						'Given this ML expression:',
						A2(
						_elm_lang$core$Basics_ops['++'],
						'val e1 = e2 ',
						A2(_elm_lang$core$Basics_ops['++'], myOp, ' e3')),
						A2(
						_elm_lang$core$Basics_ops['++'],
						'What is the type of ',
						A2(_elm_lang$core$Basics_ops['++'], myVar, '?'))
					]);
				return {question: question$, distractors: distractors$, answer: answer$, format: _user$project$Question$MultipleChoice};
			} else {
				if (_elm_lang$core$Native_Utils.eq(index, 3) && _elm_lang$core$Native_Utils.eq(myVar, 'e1')) {
					var answer$ = {ctor: '_Tuple2', _0: 'bool', _1: 'Correct. e1 is the test condition within an if-then-else expression, so it must be a bool'};
					var distractors$ = _elm_lang$core$Native_List.fromArray(
						[
							{ctor: '_Tuple2', _0: 'string', _1: 'Incorrect. e1 is the test condition within an if-then-else expression, so it must be a bool'},
							{ctor: '_Tuple2', _0: 'int', _1: 'Incorrect. e1 is the test condition within an if-then-else expression, so it must be a bool'},
							{ctor: '_Tuple2', _0: 'It can have any type', _1: 'Incorrect. e1 is the test condition within an if-then-else expression, so it must be a bool'}
						]);
					var question$ = _elm_lang$core$Native_List.fromArray(
						[
							'Given this ML expression:',
							'if e1 then e2 else e3',
							A2(
							_elm_lang$core$Basics_ops['++'],
							'What is the type of ',
							A2(_elm_lang$core$Basics_ops['++'], myVar, '?'))
						]);
					return {question: question$, distractors: distractors$, answer: answer$, format: _user$project$Question$MultipleChoice};
				} else {
					var myAnswer = A3(
						_user$project$Question$pickOne,
						A2(_elm_lang$core$List$drop, 1, randomValues),
						_elm_lang$core$Native_List.fromArray(
							['int', 'bool', 'string']),
						'int');
					var _p2 = A2(
						_elm_lang$core$List$partition,
						function (s) {
							return _elm_lang$core$Native_Utils.eq(s, myAnswer);
						},
						_elm_lang$core$Native_List.fromArray(
							['int', 'bool', 'string', 'It can have any type']));
					var myDistractors = _p2._1;
					var distractors$ = A3(
						_elm_lang$core$List$foldr,
						F2(
							function (d, ds) {
								return A2(
									_elm_lang$core$List_ops['::'],
									{ctor: '_Tuple2', _0: d, _1: 'Incorrect. Both branches of an if-then-else statement must have the same type.'},
									ds);
							}),
						_elm_lang$core$Native_List.fromArray(
							[]),
						myDistractors);
					var answer$ = {ctor: '_Tuple2', _0: myAnswer, _1: 'Correct. Both branches of an if-then-else statement must have the same type.'};
					var myVar2 = _elm_lang$core$Native_Utils.eq(myVar, 'e2') ? 'e3' : 'e2';
					var question$ = _elm_lang$core$Native_List.fromArray(
						[
							'Given this ML expression:',
							'if e1 then e2 else e3',
							A2(
							_elm_lang$core$Basics_ops['++'],
							'If ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								myVar,
								A2(
									_elm_lang$core$Basics_ops['++'],
									' has type ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										myAnswer,
										A2(
											_elm_lang$core$Basics_ops['++'],
											', what is the type of ',
											A2(_elm_lang$core$Basics_ops['++'], myVar2, '?'))))))
						]);
					return {question: question$, distractors: distractors$, answer: answer$, format: _user$project$Question$MultipleChoice};
				}
			}
		}
	});
var _user$project$Question$FillInTheBlank = {ctor: 'FillInTheBlank'};
var _user$project$Question$emptyQuestion = {
	question: _elm_lang$core$Native_List.fromArray(
		[]),
	distractors: _elm_lang$core$Native_List.fromArray(
		[]),
	answer: {ctor: '_Tuple2', _0: '', _1: ''},
	format: _user$project$Question$FillInTheBlank
};
